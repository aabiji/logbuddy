// Code generated by sqlc. DO NOT EDIT.
// versions:
//   sqlc v1.30.0
// source: batch.go

package database

import (
	"context"
	"errors"

	"github.com/jackc/pgx/v5"
)

var (
	ErrBatchAlreadyClosed = errors.New("batch already closed")
)

const createExercises = `-- name: CreateExercises :batchmany
insert into exercises
(userID, workoutID, exerciseType, name, weight, weightUnit, reps, duration)
values ($1, $2, $3, $4, $5, $6, $7, $8) returning id
`

type CreateExercisesBatchResults struct {
	br     pgx.BatchResults
	tot    int
	closed bool
}

type CreateExercisesParams struct {
	Userid       int32
	Workoutid    int32
	Exercisetype string
	Name         string
	Weight       int32
	Weightunit   string
	Reps         []int32
	Duration     float64
}

func (q *Queries) CreateExercises(ctx context.Context, arg []CreateExercisesParams) *CreateExercisesBatchResults {
	batch := &pgx.Batch{}
	for _, a := range arg {
		vals := []interface{}{
			a.Userid,
			a.Workoutid,
			a.Exercisetype,
			a.Name,
			a.Weight,
			a.Weightunit,
			a.Reps,
			a.Duration,
		}
		batch.Queue(createExercises, vals...)
	}
	br := q.db.SendBatch(ctx, batch)
	return &CreateExercisesBatchResults{br, len(arg), false}
}

func (b *CreateExercisesBatchResults) Query(f func(int, []int32, error)) {
	defer b.br.Close()
	for t := 0; t < b.tot; t++ {
		var items []int32
		if b.closed {
			if f != nil {
				f(t, items, ErrBatchAlreadyClosed)
			}
			continue
		}
		err := func() error {
			rows, err := b.br.Query()
			if err != nil {
				return err
			}
			defer rows.Close()
			for rows.Next() {
				var id int32
				if err := rows.Scan(&id); err != nil {
					return err
				}
				items = append(items, id)
			}
			return rows.Err()
		}()
		if f != nil {
			f(t, items, err)
		}
	}
}

func (b *CreateExercisesBatchResults) Close() error {
	b.closed = true
	return b.br.Close()
}
