// Code generated by sqlc. DO NOT EDIT.
// versions:
//   sqlc v1.30.0
// source: queries.sql

package database

import (
	"context"
	"time"
)

const createFood = `-- name: CreateFood :exec
insert into Foods
(LastModified, Name, Servings, ServingSizes, Calories,
Carbohydrates, Protein, Fat, Calcium, Potassium, Iron)
values ($1, $2, $3, $4, $5, $6, $7, $8, $9, $10, $11)
returning ID
`

type CreateFoodParams struct {
	Lastmodified  time.Time
	Name          string
	Servings      []int32
	Servingsizes  []string
	Calories      float64
	Carbohydrates float64
	Protein       float64
	Fat           float64
	Calcium       float64
	Potassium     float64
	Iron          float64
}

func (q *Queries) CreateFood(ctx context.Context, arg CreateFoodParams) error {
	_, err := q.db.Exec(ctx, createFood,
		arg.Lastmodified,
		arg.Name,
		arg.Servings,
		arg.Servingsizes,
		arg.Calories,
		arg.Carbohydrates,
		arg.Protein,
		arg.Fat,
		arg.Calcium,
		arg.Potassium,
		arg.Iron,
	)
	return err
}

const createUser = `-- name: CreateUser :one
insert into Users (LastModified, Email, Password)
values ($1, $2, $3) returning id
`

type CreateUserParams struct {
	Lastmodified time.Time
	Email        string
	Password     string
}

func (q *Queries) CreateUser(ctx context.Context, arg CreateUserParams) (int32, error) {
	row := q.db.QueryRow(ctx, createUser, arg.Lastmodified, arg.Email, arg.Password)
	var id int32
	err := row.Scan(&id)
	return id, err
}

const findByID = `-- name: FindByID :one
select id, lastmodified, name, servings, servingsizes, calories, carbohydrates, protein, fat, calcium, potassium, iron from Foods where ID = $1
`

func (q *Queries) FindByID(ctx context.Context, id int32) (Food, error) {
	row := q.db.QueryRow(ctx, findByID, id)
	var i Food
	err := row.Scan(
		&i.ID,
		&i.Lastmodified,
		&i.Name,
		&i.Servings,
		&i.Servingsizes,
		&i.Calories,
		&i.Carbohydrates,
		&i.Protein,
		&i.Fat,
		&i.Calcium,
		&i.Potassium,
		&i.Iron,
	)
	return i, err
}

const getUserByEmail = `-- name: GetUserByEmail :one
select ID, Email, Password from Users where Email = $1
`

type GetUserByEmailRow struct {
	ID       int32
	Email    string
	Password string
}

func (q *Queries) GetUserByEmail(ctx context.Context, email string) (GetUserByEmailRow, error) {
	row := q.db.QueryRow(ctx, getUserByEmail, email)
	var i GetUserByEmailRow
	err := row.Scan(&i.ID, &i.Email, &i.Password)
	return i, err
}

const getUserByID = `-- name: GetUserByID :one
select ID from Users where ID = $1
`

func (q *Queries) GetUserByID(ctx context.Context, id int32) (int32, error) {
	row := q.db.QueryRow(ctx, getUserByID, id)
	err := row.Scan(&id)
	return id, err
}
