// Code generated by sqlc. DO NOT EDIT.
// versions:
//   sqlc v1.30.0
// source: queries.sql

package database

import (
	"context"
	"time"
)

const createDefaultPreferences = `-- name: CreateDefaultPreferences :exec
insert into userpreferences (userID, lastModified, mealTags)
values ($1, $2, ARRAY['Breakfast','Lunch','Dinner','Snacks'])
`

type CreateDefaultPreferencesParams struct {
	Userid       int32
	Lastmodified time.Time
}

func (q *Queries) CreateDefaultPreferences(ctx context.Context, arg CreateDefaultPreferencesParams) error {
	_, err := q.db.Exec(ctx, createDefaultPreferences, arg.Userid, arg.Lastmodified)
	return err
}

const createFood = `-- name: CreateFood :one
insert into foods
(lastModified, userid, name, servings, servingSizes, defaultServingIndex,
calories, carbohydrate, protein, fat, calcium, potassium, iron)
values ($1, $2, $3, $4, $5, $6, $7, $8, $9, $10, $11, $12, $13)
returning id
`

type CreateFoodParams struct {
	Lastmodified        time.Time
	Userid              int32
	Name                string
	Servings            []int32
	Servingsizes        []string
	Defaultservingindex int32
	Calories            float64
	Carbohydrate        float64
	Protein             float64
	Fat                 float64
	Calcium             float64
	Potassium           float64
	Iron                float64
}

func (q *Queries) CreateFood(ctx context.Context, arg CreateFoodParams) (int32, error) {
	row := q.db.QueryRow(ctx, createFood,
		arg.Lastmodified,
		arg.Userid,
		arg.Name,
		arg.Servings,
		arg.Servingsizes,
		arg.Defaultservingindex,
		arg.Calories,
		arg.Carbohydrate,
		arg.Protein,
		arg.Fat,
		arg.Calcium,
		arg.Potassium,
		arg.Iron,
	)
	var id int32
	err := row.Scan(&id)
	return id, err
}

const createMeal = `-- name: CreateMeal :one
insert into meals
(userID, lastModified, deleted, foodID, date, mealTag, servings, unit)
values ($1, $2, $3, $4, $5, $6, $7, $8) returning id
`

type CreateMealParams struct {
	Userid       int32
	Lastmodified time.Time
	Deleted      bool
	Foodid       int32
	Date         string
	Mealtag      string
	Servings     int32
	Unit         string
}

func (q *Queries) CreateMeal(ctx context.Context, arg CreateMealParams) (int32, error) {
	row := q.db.QueryRow(ctx, createMeal,
		arg.Userid,
		arg.Lastmodified,
		arg.Deleted,
		arg.Foodid,
		arg.Date,
		arg.Mealtag,
		arg.Servings,
		arg.Unit,
	)
	var id int32
	err := row.Scan(&id)
	return id, err
}

const createUser = `-- name: CreateUser :one
insert into users (lastModified, email, password)
values ($1, $2, $3) returning id
`

type CreateUserParams struct {
	Lastmodified time.Time
	Email        string
	Password     string
}

func (q *Queries) CreateUser(ctx context.Context, arg CreateUserParams) (int32, error) {
	row := q.db.QueryRow(ctx, createUser, arg.Lastmodified, arg.Email, arg.Password)
	var id int32
	err := row.Scan(&id)
	return id, err
}

const deleteMeal = `-- name: DeleteMeal :exec
update meals set deleted = true, lastModified = $1
where userID = $2 and id = $3
`

type DeleteMealParams struct {
	Lastmodified time.Time
	Userid       int32
	ID           int32
}

func (q *Queries) DeleteMeal(ctx context.Context, arg DeleteMealParams) error {
	_, err := q.db.Exec(ctx, deleteMeal, arg.Lastmodified, arg.Userid, arg.ID)
	return err
}

const getFoodByID = `-- name: GetFoodByID :one
select id, userid, lastmodified, name, defaultservingindex, servings, servingsizes, calories, carbohydrate, protein, fat, calcium, potassium, iron from foods where id = $1
`

func (q *Queries) GetFoodByID(ctx context.Context, id int32) (Food, error) {
	row := q.db.QueryRow(ctx, getFoodByID, id)
	var i Food
	err := row.Scan(
		&i.ID,
		&i.Userid,
		&i.Lastmodified,
		&i.Name,
		&i.Defaultservingindex,
		&i.Servings,
		&i.Servingsizes,
		&i.Calories,
		&i.Carbohydrate,
		&i.Protein,
		&i.Fat,
		&i.Calcium,
		&i.Potassium,
		&i.Iron,
	)
	return i, err
}

const getMealsForDay = `-- name: GetMealsForDay :many
select id, foodID, date, mealTag, servings, unit
from meals where date = $1 and userID = $2 and deleted = false
`

type GetMealsForDayParams struct {
	Date   string
	Userid int32
}

type GetMealsForDayRow struct {
	ID       int32
	Foodid   int32
	Date     string
	Mealtag  string
	Servings int32
	Unit     string
}

func (q *Queries) GetMealsForDay(ctx context.Context, arg GetMealsForDayParams) ([]GetMealsForDayRow, error) {
	rows, err := q.db.Query(ctx, getMealsForDay, arg.Date, arg.Userid)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	var items []GetMealsForDayRow
	for rows.Next() {
		var i GetMealsForDayRow
		if err := rows.Scan(
			&i.ID,
			&i.Foodid,
			&i.Date,
			&i.Mealtag,
			&i.Servings,
			&i.Unit,
		); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const getUserByEmail = `-- name: GetUserByEmail :one
select id, email, Password from users where email = $1
`

type GetUserByEmailRow struct {
	ID       int32
	Email    string
	Password string
}

func (q *Queries) GetUserByEmail(ctx context.Context, email string) (GetUserByEmailRow, error) {
	row := q.db.QueryRow(ctx, getUserByEmail, email)
	var i GetUserByEmailRow
	err := row.Scan(&i.ID, &i.Email, &i.Password)
	return i, err
}

const getUserByID = `-- name: GetUserByID :one
select id from users where id = $1
`

func (q *Queries) GetUserByID(ctx context.Context, id int32) (int32, error) {
	row := q.db.QueryRow(ctx, getUserByID, id)
	err := row.Scan(&id)
	return id, err
}

const searchFoods = `-- name: SearchFoods :many
select id, userid, lastmodified, name, defaultservingindex, servings, servingsizes, calories, carbohydrate, protein, fat, calcium, potassium, iron from foods
where to_tsvector(name) @@ websearch_to_tsquery($1) limit 100
`

func (q *Queries) SearchFoods(ctx context.Context, websearchToTsquery string) ([]Food, error) {
	rows, err := q.db.Query(ctx, searchFoods, websearchToTsquery)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	var items []Food
	for rows.Next() {
		var i Food
		if err := rows.Scan(
			&i.ID,
			&i.Userid,
			&i.Lastmodified,
			&i.Name,
			&i.Defaultservingindex,
			&i.Servings,
			&i.Servingsizes,
			&i.Calories,
			&i.Carbohydrate,
			&i.Protein,
			&i.Fat,
			&i.Calcium,
			&i.Potassium,
			&i.Iron,
		); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const searchUserFoods = `-- name: SearchUserFoods :many
select id, userid, lastmodified, name, defaultservingindex, servings, servingsizes, calories, carbohydrate, protein, fat, calcium, potassium, iron from foods
where to_tsvector(name) @@ websearch_to_tsquery($1) and userid = $2
limit 100
`

type SearchUserFoodsParams struct {
	WebsearchToTsquery string
	Userid             int32
}

func (q *Queries) SearchUserFoods(ctx context.Context, arg SearchUserFoodsParams) ([]Food, error) {
	rows, err := q.db.Query(ctx, searchUserFoods, arg.WebsearchToTsquery, arg.Userid)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	var items []Food
	for rows.Next() {
		var i Food
		if err := rows.Scan(
			&i.ID,
			&i.Userid,
			&i.Lastmodified,
			&i.Name,
			&i.Defaultservingindex,
			&i.Servings,
			&i.Servingsizes,
			&i.Calories,
			&i.Carbohydrate,
			&i.Protein,
			&i.Fat,
			&i.Calcium,
			&i.Potassium,
			&i.Iron,
		); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const updateMeal = `-- name: UpdateMeal :exec
update meals
set lastModified = $1, mealTag = $2, servings = $3, unit = $4
where ID = $5
`

type UpdateMealParams struct {
	Lastmodified time.Time
	Mealtag      string
	Servings     int32
	Unit         string
	ID           int32
}

func (q *Queries) UpdateMeal(ctx context.Context, arg UpdateMealParams) error {
	_, err := q.db.Exec(ctx, updateMeal,
		arg.Lastmodified,
		arg.Mealtag,
		arg.Servings,
		arg.Unit,
		arg.ID,
	)
	return err
}
